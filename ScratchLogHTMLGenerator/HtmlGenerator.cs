using System.IO;
using System.Linq;
using ScratchEVTCParser.Model;
using ScratchEVTCParser.Model.Agents;
using ScratchEVTCParser.Model.Encounters;
using ScratchEVTCParser.Statistics;

namespace ScratchLogHTMLGenerator
{
	public class HtmlGenerator
	{
		public void WriteHtml(TextWriter writer, LogStatistics stats)
		{
			string result = (stats.EncounterResult == EncounterResult.Success ? "Success"
				: stats.EncounterResult == EncounterResult.Failure ? "Failure" : "Result unknown");

			writer.WriteLine($@"<!DOCTYPE html>
<html>
<head>
    <title>{stats.EncounterName}</title>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css'>
    <script defer src='https://use.fontawesome.com/releases/v5.1.0/js/all.js'></script>
	<script>
		function openTab(tabLink) {{
			var tabs = document.getElementsByClassName('scratch-tab');
			for (var i = 0; i < tabs.length; i++) {{
				tabs[i].classList.add('is-hidden');
			}}
			var tabLinks = document.getElementsByClassName('scratch-tablink');
			for (var i = 0; i < tabLinks.length; i++) {{
				tabLinks[i].classList.remove('is-active');
			}}
			tabLink.classList.add('is-active');
			var tabName = 'tab-' + tabLink.id.substring('tablink-'.length);
			document.getElementById(tabName).classList.remove('is-hidden');
		}}
	</script>
</head>
<body>
<section class='section'>
<div class='container'>
    <h1 class='title'>{stats.EncounterName}</h1>
    <div class='subtitle'>{result} in {MillisecondsToReadableFormat(stats.FightTimeMs)}</div>
    <div class='columns'>");

			WriteMenu(writer, stats);

			writer.WriteLine(@"
        <div id='tab-general' class='content column scratch-tab'>
			General tab
		</div>");

			writer.WriteLine(@"
        <div id='tab-eventcounts' class='content column scratch-tab is-hidden'>");
			WriteEventCounts(writer, stats);
			writer.WriteLine(@"
		</div>");

			int phaseIndex = 0;
			foreach (var phaseStats in stats.PhaseStats)
			{
				writer.WriteLine($@"
        <div id='tab-phase-{phaseIndex++}' class='content column scratch-tab is-hidden'>");
				writer.WriteLine($@"
            <div class='title is-4'>{phaseStats.PhaseName}</div>
            <div class='subtitle is-6'>Duration: {MillisecondsToReadableFormat(phaseStats.PhaseDuration)}</div>");
				WriteDamageTable(writer, phaseStats);
				writer.WriteLine($@"</div>");
			}

			writer.WriteLine($@"
</div>
</div>
</section>
<footer class='footer'>
<div class='container'>
<div class='content has-text-centered'>
<p>
    Generated by the Scratch EVTC Parser.
</p>
<p>
	EVTC version: {stats.LogVersion}
</p>
</div>
</div>
</footer>
</body>
</html>");
		}

		private void WriteEventCounts(TextWriter writer, LogStatistics stats)
		{

            writer.WriteLine($@"
    <table class='table is-narrow is-striped is-hoverable'>
        <thead>
        <tr>
            <th>Event name</th>
			<th>Count</th>
        </tr>
        </thead>
        <tbody>");
			foreach (var eventCount in stats.EventCounts.OrderByDescending(x => x.Value))
			{
				var eventName = eventCount.Key;
				var count = eventCount.Value;
				writer.WriteLine($@"
            <tr>
                <td>{eventName}</td>
                <td>{count}</td>
            </tr>");
			}
				writer.WriteLine($@"
        </tbody>
		<tfoot>
            <tr>
                <td>Total</td>
                <td>{stats.EventCounts.Sum(x => x.Value)}</td>
            </tr>
		</tfoot>
    </table>");
		}

		private void WriteMenu(TextWriter writer, LogStatistics stats)
		{
			writer.WriteLine(@"
	<aside class='menu column is-3'>
		<p class='menu-label'>
			General
		</p>
		<ul class='menu-list'>
		  <li><a id='tablink-general' onclick='openTab(this)' class='scratch-tablink is-active'>Summary</a></li>
		  <li><a>More?</a></li>
		</ul>
		<p class='menu-label'>
			Phases
		</p>
		<ul class='menu-list'>");

			int phaseIndex = 0;
			foreach (var phase in stats.PhaseStats)
			{
				writer.WriteLine($@"
		  <li>
			<a id='tablink-phase-{phaseIndex++}' onclick='openTab(this)' class='scratch-tablink'>{phase.PhaseName}</a>
			<ul>");

				foreach (var damageData in phase.TargetDamageData)
				{
					writer.WriteLine($@"
			  <li><a>{damageData.Target.Name}</a></li>");
				}

				writer.WriteLine($@"
			</ul>
		  </li>");
			}

			writer.WriteLine(@"
		</ul>
		<p class='menu-label'>
			Scratch Data
		</p>
		<ul class='menu-list'>
		  <li><a>Log version</a></li>
		  <li><a id='tablink-eventcounts' onclick='openTab(this)' class='scratch-tablink'>Event counts</a></li>
		  <li><a>More?</a></li>
		</ul>
	</aside>");
		}

		private string MillisecondsToReadableFormat(long milliseconds)
		{
			return $"{milliseconds / 1000 / 60}m {milliseconds / 1000 % 60}s {milliseconds % 1000}ms";
		}

		private void WriteDamageTable(TextWriter writer, PhaseStats phaseStats)
		{
			foreach (var targetDamageData in phaseStats.TargetDamageData)
			{
				writer.WriteLine($@"
	<div class='title is-5'>{targetDamageData.Target.Name}</div>
    <table class='table is-narrow is-striped is-hoverable'>
        <thead>
        <tr>
            <th><abbr title='Subgroup'>Grp</abbr></th>
            <th>Class</th>
            <th>Name</th>
            <th>Account</th>
			<th><abbr title='Damage per second'>DPS</abbr></th>
			<th>Power DPS</th>
			<th>Condition DPS</th>
        </tr>
        </thead>
        <tbody>");
				foreach (var damageData in targetDamageData.DamageData.Where(x => x.Attacker is Player)
					.OrderByDescending(x => x.TotalDps))
				{
					var player = (Player) damageData.Attacker;
					string specialization = player.EliteSpecialization == EliteSpecialization.None
						? player.Profession.ToString()
						: player.EliteSpecialization.ToString();
					writer.WriteLine($@"
		<tr>
            <td>{player.Subgroup}</td>
            <td>{specialization}</td>
            <td>{player.Name}</td>
            <td>{player.AccountName}</td>
            <td><b>{damageData.TotalDps:0}</b></td>
            <td>{damageData.PhysicalDps:0}</td>
            <td>{damageData.ConditionDps:0}</td>
		</tr>");
				}

				writer.WriteLine($@"
        </tbody>
		<tfoot>
		<tr>
            <td colspan='4'><b>Total</b></td>
            <td><b>{targetDamageData.TotalDps:0}<b></td>
            <td>{targetDamageData.TotalPhysicalDps:0}</td>
            <td>{targetDamageData.TotalConditionDps:0}</td>
		</tr>
		</tfoot>
    </table>");
			}
		}
	}
}